{
  "hash": "9aceea2594fbafe02458f55a1ff1bf62",
  "result": {
    "markdown": "---\ntitle: \"Matching in R\"\nauthor: \"Katherine Siegel\"\ndate: \"2023-02-16\"\noutput: pdf\n---\n\n\n## Description\nCode to demonstrate matching in R. Adapted from the supplementary materials from Butsic, V. et al. (2017): Quasi-experimental methods enable stronger inferences from observational data in ecology. (c) Matthias Baumann (2017-01-10).\t\n\nIn the Butsic et al. paper, they used the example of the impact of wildfire on species richness. Here, we will simulate data with a known treatment effect of fire on species richness. We will then compare the estimated effect we get through a naive ordinary least squares (OLS) regression approach to the effect we estimate when we use matching methods to control for observable confounding variables.\n\n## Set up\nLoad required packages. In this demo, we will use the package \"MatchIt\" for the matching process.\n\n\n\n\n## Simulate data\nSimulated data is handy because we know the true effect of the treatment variable. Here, we'll write a function to simulate a dataset where we know the true effect of fire on species richness.\n\n::: {.cell}\n\n```{.r .cell-code}\n### Function to simulate data and write it as a dataframe\nsimulate_data <- function(){\n  \n  ### Create variables in a dataframe\n  \n  ### Make column for observation ID\n  df <- data.frame(id = seq(1,1000),\n                   \n                   ### Add columns for explanatory variables\n                   \n                   ### Add column for treatment variable\n                   fire = c(rep(0,500), rep(1,500)),\n                   \n                   ### And the rest of the covariates\n                   slope = c(runif(500, min = 50, max = 90), \n                             runif(500, min = 65, max = 150)),\n                   elevation = c(runif(500, min = 150, max = 185), \n                                 runif(500, min = 165, max = 200)),\n                   stream = runif(1000, min = 0, max = 1),\n                   \n                   ### And the error term\n                   error = rnorm(1000, mean = 0, sd = 5))\n  \n  ### Add a slope*slope variable\n  df <- df %>%\n    mutate(slope2 = slope^2)\n  \n  ### Make column for outcome variable (species richness) \n  df <- df %>%\n    mutate(species_richness = 1 + 5*fire + 0.07*slope + 0.05*elevation + 2*stream - 0.005*slope2 + error)\n  return(df)\n}\n```\n:::\n\n*We know that the true effect of the treatment variable (fire) is a 5x increase in the response variable (species richness).*\n\n## Estimate the effect using ordinary least squares\n\n::: {.cell}\n\n```{.r .cell-code}\n### Write a function to generate data and analyze using OLS \nols_fun <- function(){\n  \n  ### Simulate the dataset\n  data <- simulate_data()\n  \n  ### Run OLS regression\n  ols <- lm(species_richness ~ fire + slope + elevation + stream, \n            data = data)\n  \n  ### Extract model coefficients and standard error\n  fire_coeff <- coef(summary(ols))[\"fire\", \"Estimate\"]\n  fire_se <- coef(summary(ols))[\"fire\", \"Std. Error\"]\n  list <- list(fire_coeff, fire_se)\n}\n\n### Apply the function to 1000 replicates\nols_sim <- replicate(1000, ols_fun())\n\n### Extract the model estimates\nols_fire_est <- unlist(ols_sim[1, ])\n\n### Print mean, standard deviation, minimum, and maximum values for coefficient estimates\nc(mean(ols_fire_est), sd(ols_fire_est), \n  min(ols_fire_est), max(ols_fire_est))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.1008338 0.5424696 5.0320081 9.0691442\n```\n:::\n\n```{.r .cell-code}\n### Extract the standard deviations\nols_fire_sd <- unlist(ols_sim[2, ])\n\n### Print mean, standard deviation, minimum, and maximum standard deviation of coefficient estimates\nc(mean(ols_fire_sd), sd(ols_fire_sd), \n  min(ols_fire_sd), max(ols_fire_sd))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.60544308 0.01873282 0.55205740 0.66273301\n```\n:::\n:::\n\n*The effect estimated by OLS is incorrect-- it should be 5.*\n\n## Use pre-regression matching, then run the regression\n\n::: {.cell}\n\n```{.r .cell-code}\n### Write a function to generate the data, use matching to subset the data, and run a regression on the matched data\npps_fun <- function(){\n  \n  ### Simulate the dataset\n  data <- simulate_data()\n  \n  ### Match the data on the observed covariates\n  match <- matchit(fire ~ slope + \n                     elevation + \n                     stream, \n                   \n                   ### set method to use for matching\n                   method = \"nearest\", \n                   \n                   ### tell it what data source to draw matches from\n                   data = data, \n                   \n                   ### tell it to use logistic regression for the matching\n                   distance = \"glm\", \n                   link = \"probit\",\n                   \n                   ### specify which order to draw potential points from the full dataset\n                   m.order = \"random\",\n                   \n                   ### set a maximum distance for the matches\n                   caliper = 0.10)\n  \n  ### Extract the matched data from the full dataset\n  matched_data = match.data(match)\n  \n  ### Run OLS on the matched dataset\n  ols <- lm(species_richness ~ fire + slope + \n              elevation + stream, \n            data = matched_data)\n  \n  ### Extract model coefficients\n  fire_coeff <- coef(summary(ols))[\"fire\", \"Estimate\"]\n  fire_se <- coef(summary(ols))[\"fire\", \"Std. Error\"]\n  list <- list(fire_coeff, fire_se) \n}\n\n### Apply the function to 1000 replicates\npps_sim <- replicate(1000, pps_fun())\n\n### Extract the model estimates\npps_fire_est <- unlist(pps_sim[1,])\n\n### Print mean, standard deviation, minimum, and maximum values for coefficient estimates\nc(mean(pps_fire_est), sd(pps_fire_est), \n  min(pps_fire_est), max(pps_fire_est))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.8476402 0.6820782 2.7706630 6.9225325\n```\n:::\n\n```{.r .cell-code}\n### Extract the standard deviations\npps_fire_sd <- unlist(pps_sim[2,])\n\n### Print mean, standard deviation, minimum, and maximum standard deviation of coefficient estimates\nc(mean(pps_fire_sd), sd(pps_fire_sd), \n  min(pps_fire_sd), max(pps_fire_sd))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.67544023 0.04195023 0.56855339 0.82289393\n```\n:::\n:::\n\n\n## Take a closer look at the matching process\n### Pre-matching data\n\n::: {.cell}\n\n```{.r .cell-code}\n### Simulate a dataset\ndata_for_match <- simulate_data()\n\n### Make fire a factor variable\ndata_for_match <- data_for_match %>%\n  mutate_at(vars(fire), \n            funs(factor))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nPlease use a list of either functions or lambdas: \n\n  # Simple named list: \n  list(mean = mean, median = median)\n\n  # Auto named with `tibble::lst()`: \n  tibble::lst(mean, median)\n\n  # Using lambdas\n  list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n```\n:::\n\n```{.r .cell-code}\n### Take a look at the balance of the covariates before matching\ndata_for_match %>%\n  dplyr::select(id, fire, slope, elevation, stream) %>%\n  gather(variable, value, slope:stream, factor_key = TRUE) %>%\n  ggplot(aes(x = variable, y = value, color = fire)) +\n  geom_boxplot() +\n  xlab(\"Variable\") + ylab(\"Value\")\n```\n\n::: {.cell-output-display}\n![](matching_demo_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\n### fires: 0 = unburned, 1 = burned\n\n### You can also look at it in table form\ncovariate_summ <- data_for_match %>%\n  group_by(fire) %>%\n  summarise(slope_mean = mean(slope),\n            slope_sd = sd(slope),\n            elevation_mean = mean(elevation),\n            elevation_sd = sd(elevation),\n            stream_mean = mean(stream),\n            stream_sd = sd(stream))\nView(covariate_summ)\n```\n:::\n\nWe can see that there are issues with the balance between the burned and unburned sample units. The burned areas are on steeper slopes and higher elevations, on average.\n\n### Match the data\n\n::: {.cell}\n\n```{.r .cell-code}\n### Match the data on the observed covariates\nmatch <- matchit(fire ~ slope + \n                   elevation + \n                   stream, \n                 \n                 ### set method to use for matching\n                 method = \"nearest\", \n                 \n                 ### tell it what data source to draw matches from\n                 data = data_for_match, \n                 \n                 ### tell it to use logistic regression for the matching\n                 distance = \"glm\", \n                 link = \"probit\",\n                 \n                 ### specify which order to draw potential points from the full dataset\n                 m.order = \"random\",\n                 \n                 ### set a maximum distance for the matches\n                 caliper = 0.10)\n\n### Take a look at the quality of the matches\nmatch_quality <- summary(match, \n                         standardize = TRUE)\n\n### Let's see how many points were matched\nmatch_quality_nn <- as.data.frame(match_quality$nn)\nView(match_quality_nn)\n\n### Let's look at the pre-match covariate balance\nmatch_quality_unmatched <- as.data.frame(match_quality$sum.all)\nView(match_quality_unmatched)\n\n### What does the covariate balance look like after matching?\nmatch_quality_summary <- as.data.frame(match_quality$sum.matched)\nView(match_quality_summary)\n### Ideally, you want the standardized mean differences in the matched dataset to be < 0.25 (reference: Schleicher et al. 2020. Statistical matching for conservation science. Conserv. Biol. 34:538â€“549. https://doi.org/10.1111/cobi.13448).\n\n### You can also look at the amount of bias reduction achieved through matching\nmatch_quality_reduction <- as.data.frame(match_quality$reduction)\nView(match_quality_reduction)\n\n### You can also use a fun interactive command to visualize the pre- and post-match covariate spread\nplot(match, interactive = FALSE)\n```\n\n::: {.cell-output-display}\n![](matching_demo_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "matching_demo_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}